# This adds in the linear regression line
geom_smooth(method = lm))
word_len_vs_uniqueness
word_len_vs_uniqueness <- (ggplot(data = ts_song_frame, aes(x = Ave_Word_Length, y = Fraction_Unique)) +
geom_point(size = 3,
aes(color = Album)) +
annotate("text", x=3.5, y=.45, size = 6,
label= "italic(r) == .475", parse = TRUE) +
annotate("text", x = 3.45, y = .195, size = 3,
label = "All You Had To Do Was Stay") +
annotate("text", x = 4.38, y = .335, size = 3,
label = "Starlight") +
annotate("text", x = 3.4, y = .168, size = 3,
label = "Out Of The Woods") +
annotate("text", x = 3.84, y = .515, size = 3,
label = "The Best Day") +
annotate("text", x = 4.3, y = .51, size = 3,
label = "Sad Beautiful Tragic") +
labs(title = "Song Repitition Against Average Word Length",
x = "Average Word Length",
y = "Fraction of Lyrics that are Unique") +
# This is totally optional and just to make the plot look better
theme(plot.title = element_text(color = "black",
size = 14,
face = "bold.italic"),
axis.title.x = element_text(size = 12,
face = "bold"),
axis.title.y = element_text(size = 12,
face = "bold")) +
# This adds in the linear regression line
geom_smooth(method = lm))
word_len_vs_uniqueness
test_gg <- (ggplot(data = ts_song_frame, aes(x = Ave_Word_Length, y = Total_Words)) +
geom_point(size = 3,
aes(color = Album)) +
labs(title = "Song Repitition Against Average Word Length",
x = "Average Word Length",
y = "Fraction of Lyrics that are Unique") +
# This is totally optional and just to make the plot look better
theme(plot.title = element_text(color = "black",
size = 14,
face = "bold.italic"),
axis.title.x = element_text(size = 12,
face = "bold"),
axis.title.y = element_text(size = 12,
face = "bold")) +
# This adds in the linear regression line
geom_smooth(method = lm))
test_gg
word_lengths <- word_lengths[1:17]
word_lengths
word_length_frame <- data.frame("length" = 1:17,
"count" = word_lengths)
word_length_dist <- (ggplot(data = word_length_frame, aes(x = length, y = word_lengths)) +
geom_bar(stat = "identity", fill = "blue", alpha = .75) +
geom_text(label = word_lengths,
nudge_y = 200) +
scale_x_continuous(breaks = 1:17) +
labs(title = "Distribution of Word Lengths in Taylor Swift Songs",
x = "Number of Letters",
y = "Proportion of Words") +
theme(plot.title = element_text(color = "black",
size = 14,
face = "bold.italic"),
axis.title.x = element_text(size = 12,
face = "bold"),
axis.title.y = element_text(size = 12,
face = "bold")))
word_length_dist
drake_word_lengths <- rep(0, 17)
for (song in all_drake_song_lyrics) {
for (word_pos in 1:length(song)) {
current_length <- nchar(song[word_pos])
drake_word_lengths[current_length] <- drake_word_lengths[current_length] + 1
}
}
drake_word_lengths
drake_word_lengths <- drake_word_lengths[2:17]
len_compare_frame <- data.frame("Length" = rep(2:17, 2),
"Counts" = c(word_lengths,
drake_word_lengths),
"Proportions" = c(word_lengths/sum(word_lengths),
drake_word_lengths/sum(word_lengths)),
"Artist" = c(rep("Taylor Swift", 16),
rep("Drake", 16)))
drake_word_lengths <- drake_word_lengths[2:17]
word_lengths <- word_lengths[2:17]
word_lengths <- rep(0, 20)
for (song in all_ts_song_lyrics_with_i) {
for (word_pos in 1:length(song)) {
current_length <- nchar(song[word_pos])
word_lengths[current_length] <- word_lengths[current_length] + 1
}
}
word_lengths
word_lengths <- word_lengths[1:17]
word_length_frame <- data.frame("length" = 1:17,
"count" = word_lengths)
word_length_dist <- (ggplot(data = word_length_frame, aes(x = length, y = word_lengths)) +
geom_bar(stat = "identity", fill = "blue", alpha = .75) +
geom_text(label = word_lengths,
nudge_y = 200) +
scale_x_continuous(breaks = 1:17) +
labs(title = "Distribution of Word Lengths in Taylor Swift Songs",
x = "Number of Letters",
y = "Number of Words") +
theme(plot.title = element_text(color = "black",
size = 14,
face = "bold.italic"),
axis.title.x = element_text(size = 12,
face = "bold"),
axis.title.y = element_text(size = 12,
face = "bold")))
word_length_dist
drake_word_lengths <- rep(0, 17)
for (song in all_drake_song_lyrics) {
for (word_pos in 1:length(song)) {
current_length <- nchar(song[word_pos])
drake_word_lengths[current_length] <- drake_word_lengths[current_length] + 1
}
}
drake_word_lengths <- drake_word_lengths[2:17]
word_lengths <- word_lengths[2:17]
len_compare_frame <- data.frame("Length" = rep(2:17, 2),
"Counts" = c(word_lengths,
drake_word_lengths),
"Proportions" = c(word_lengths/sum(word_lengths),
drake_word_lengths/sum(word_lengths)),
"Artist" = c(rep("Taylor Swift", 16),
rep("Drake", 16)))
len_compare_frame
?melt
melt(len_compare_frame, value.name = "Length" )
melt(len_compare_frame, id.vars = "Length" )
(ggplot(data = len_compare_frame, aes(x = Length, y = Proportions)) +
geom_bar())
(ggplot(data = len_compare_frame, aes(x = Length, y = Proportions)) +
geom_bar(stat = "identity"))
(ggplot(data = len_compare_frame, aes(x = Length, y = Proportions)) +
geom_bar(stat = "identity", position = "dodge", aes(color = Artist)))
(ggplot(data = len_compare_frame, aes(x = Length, y = Proportions)) +
geom_bar(stat = "identity", position = "dodge", aes(fill = Artist)))
len_compare_frame <- data.frame("Length" = rep(2:17, 2),
"Counts" = c(word_lengths,
drake_word_lengths),
"Proportions" = c(word_lengths/sum(word_lengths),
drake_word_lengths/sum(drake_word_lengths)),
"Artist" = c(rep("Taylor Swift", 16),
rep("Drake", 16)))
(ggplot(data = len_compare_frame, aes(x = Length, y = Proportions)) +
geom_bar(stat = "identity", position = "dodge", aes(fill = Artist)))
drake_and_ts_lengths <- (ggplot(data = len_compare_frame, aes(x = Length, y = Proportions)) +
geom_bar(stat = "identity", position = "dodge", aes(fill = Artist)) +
scale_x_continuous(breaks = 2:17) +
labs(title = "Comparing Word Lengths in Taylor Swift and Drake Songs ",
x = "Number of Letters",
y = "Proportion of Words") )
drake_and_ts_lengths
all_ts_song_lyrics_with_i <- c(ts1_song_lyrics,
ts2_song_lyrics,
fp_song_lyrics,
ts3_song_lyrics,
ts4_song_lyrics,
ts5_song_lyrics,
ts6_song_lyrics)
names(all_ts_song_lyrics_with_i) <- all_ts_song_names
word_lengths <- rep(0, 20)
for (song in all_ts_song_lyrics_with_i) {
for (word_pos in 1:length(song)) {
current_length <- nchar(song[word_pos])
word_lengths[current_length] <- word_lengths[current_length] + 1
}
}
get_average_length <- function(song) {
total_characters <- 0
num_words <- length(song)
for (word in song) {
total_characters <- total_characters + nchar(word)
}
ave_characters <- total_characters / num_words
return(ave_characters)
}
ave_length_by_song <- rep(0,length(all_ts_song_lyrics))
for (i in 1:length(all_ts_song_lyrics)) {
ave_length_by_song[i] <- get_average_length(all_ts_song_lyrics[[i]])
}
ts_song_frame$Ave_Word_Length <- ave_length_by_song
word_len_vs_unique_cor <- cor(ts_song_frame$Ave_Word_Length, ts_song_frame$Fraction_Unique)
word_len_vs_uniqueness <- (ggplot(data = ts_song_frame, aes(x = Ave_Word_Length, y = Fraction_Unique)) +
geom_point(size = 3,
aes(color = Album)) +
annotate("text", x=3.5, y=.45, size = 6,
label= "italic(r) == .475", parse = TRUE) +
annotate("text", x = 3.45, y = .195, size = 3,
label = "All You Had To Do Was Stay") +
annotate("text", x = 4.38, y = .335, size = 3,
label = "Starlight") +
annotate("text", x = 3.4, y = .168, size = 3,
label = "Out Of The Woods") +
annotate("text", x = 3.84, y = .515, size = 3,
label = "The Best Day") +
annotate("text", x = 4.3, y = .51, size = 3,
label = "Sad Beautiful Tragic") +
labs(title = "Song Repitition Against Average Word Length",
x = "Average Word Length",
y = "Fraction of Lyrics that are Unique") +
# This is totally optional and just to make the plot look better
theme(plot.title = element_text(color = "black",
size = 14,
face = "bold.italic"),
axis.title.x = element_text(size = 12,
face = "bold"),
axis.title.y = element_text(size = 12,
face = "bold")) +
# This adds in the linear regression line
geom_smooth(method = lm))
word_len_vs_uniqueness
word_lengths <- word_lengths[1:17]
word_length_frame <- data.frame("length" = 1:17,
"count" = word_lengths)
word_length_dist <- (ggplot(data = word_length_frame, aes(x = length, y = word_lengths)) +
geom_bar(stat = "identity", fill = "blue", alpha = .75) +
geom_text(label = word_lengths,
nudge_y = 200) +
scale_x_continuous(breaks = 1:17) +
labs(title = "Distribution of Word Lengths in Taylor Swift Songs",
x = "Number of Letters",
y = "Number of Words") +
theme(plot.title = element_text(color = "black",
size = 14,
face = "bold.italic"),
axis.title.x = element_text(size = 12,
face = "bold"),
axis.title.y = element_text(size = 12,
face = "bold")))
word_length_dist
drake_word_lengths <- rep(0, 17)
for (song in all_drake_song_lyrics) {
for (word_pos in 1:length(song)) {
current_length <- nchar(song[word_pos])
drake_word_lengths[current_length] <- drake_word_lengths[current_length] + 1
}
}
drake_word_lengths <- drake_word_lengths[2:13]
word_lengths <- word_lengths[2:13]
len_compare_frame <- data.frame("Length" = rep(2:13, 2),
"Counts" = c(word_lengths,
drake_word_lengths),
"Proportions" = c(word_lengths/sum(word_lengths),
drake_word_lengths/sum(drake_word_lengths)),
"Artist" = c(rep("Taylor Swift", 12),
rep("Drake", 12)))
drake_and_ts_lengths <- (ggplot(data = len_compare_frame, aes(x = Length, y = Proportions)) +
geom_bar(stat = "identity", position = "dodge", aes(fill = Artist)) +
scale_x_continuous(breaks = 2:13) +
labs(title = "Comparing Word Lengths in Taylor Swift and Drake Songs ",
x = "Number of Letters",
y = "Proportion of Words") )
drake_and_ts_lengths
drake_and_ts_lengths <- (ggplot(data = len_compare_frame, aes(x = Length, y = Proportions)) +
geom_bar(stat = "identity", position = "dodge", aes(fill = Artist)) +
scale_x_continuous(breaks = 2:13) +
labs(title = "Comparing Word Lengths in Taylor Swift and Drake Songs ",
x = "Number of Letters",
y = "Proportion of Words") +
theme(plot.title = element_text(color = "black",
size = 14,
face = "bold.italic"),
axis.title.x = element_text(size = 12,
face = "bold"),
axis.title.y = element_text(size = 12,
face = "bold")))
drake_and_ts_lengths
all_word_list <- rep(NA, 20000)
i <- 1
for (song in all_ts_song_lyrics_with_i) {
for (word_pos in 1:length(song)) {
all_word_list[i] <- song[word_pos]
i <- i + 1
}
}
for (song in all_ts_song_lyrics_with_i) {
for (word_pos in 1:length(song)) {
all_word_list[i] <- song[word_pos]
i <- i + 1
}
}
length(all_word_list)
wordcloud_gen_object <- rquery.wordcloud(all_long_words, type = "text",
lang= "english", excludeWords = NULL,
textStemming = FALSE,  colorPalette="BuPu",
max.words=100)
all_word_list <- rep(NA, 20000)
i <- 1
for (song in all_ts_song_lyrics_with_i) {
for (word_pos in 1:length(song)) {
all_word_list[i] <- song[word_pos]
i <- i + 1
}
}
all_long_words <- all_word_list[nchar(all_word_list) >= 4]
wordcloud_gen_object <- rquery.wordcloud(all_long_words, type = "text",
lang= "english", excludeWords = NULL,
textStemming = FALSE,  colorPalette="BuPu",
max.words=100)
text_matrix <- wordcloud_gen_object$tdm
frequency_table_ts <- wordcloud_gen_object$freqTable
head(frequency_table_ts, 10)
filter(frequency_table_ts, freq == 13)
frequency_table_ts <- wordcloud_gen_object$freqTable
3
all_drake_word_list <- rep(NA, 20)
i <- 1
for (song in all_drake_song_lyrics) {
for (word_pos in 1:length(song)) {
all_drake_word_list[i] <- song[word_pos]
i <- i + 1
}
}
for (song in all_drake_song_lyrics) {
for (word_pos in 1:length(song)) {
all_drake_word_list[i] <- song[word_pos]
i <- i + 1
}
}
all_drake_long_words <- all_drake_word_list[nchar(all_drake_word_list) >= 4]
for (word in all_drake_long_words) {
if (word == "nigga") {
word = "n**ga"
}
else if (word == "niggas") {
word = "n**gas"
}
}
drake_wordcloud_gen_object <- rquery.wordcloud(all_drake_long_words, type = "text",
lang= "english", excludeWords = NULL,
textStemming = FALSE,  colorPalette="BuPu",
max.words=100)
all_ts_song_rankings <- c(ts1_ranking,
ts2_ranking,
fp_ranking,
ts3_ranking,
ts4_ranking,
ts5_ranking,
ts6_ranking)
ts_song_frame$Ranking <- all_ts_song_rankings
cor(ts_song_frame$Ranking, ts_song_frame$Fraction_Unique)
rank_vs_uniq <- (ggplot(data = ts_song_frame, aes(x = Ranking,
y = Fraction_Unique,
color = Album)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE))
rank_vs_uniq
rank_vs_uniq <- (ggplot(data = ts_song_frame, aes(x = Ranking,
y = Fraction_Unique,
color = Album)) +
geom_point())# +
rank_vs_uniq
rank_vs_uniq <- (ggplot(data = ts_song_frame, aes(x = Ranking,
y = Fraction_Unique,
color = Album)) +
geom_point(size = 4))# +
rank_vs_uniq
rank_vs_uniq <- (ggplot(data = ts_song_frame, aes(x = Ranking,
y = Fraction_Unique,
color = Album)) +
geom_point(size = 4,
alpha = .5))# +
rank_vs_uniq
rank_vs_uniq <- (ggplot(data = ts_song_frame, aes(x = Ranking,
y = Fraction_Unique,
color = Album)) +
geom_point(size = 4))# +
rank_vs_uniq
rank_vs_uniq <- (ggplot(data = ts_song_frame, aes(x = Ranking,
y = Fraction_Unique,
color = Album)) +
geom_point(size = 4)) +
geom_smooth(method = "lm", se = FALSE))
rank_vs_uniq <- (ggplot(data = ts_song_frame, aes(x = Ranking,
y = Fraction_Unique,
color = Album)) +
geom_point(size = 4) +
geom_smooth(method = "lm", se = FALSE))
rank_vs_uniq
rank_vs_uniq <- (ggplot(data = ts_song_frame, aes(x = Ranking,
y = Fraction_Unique)) +
geom_point(size = 4,
aes(color = Album)) +
geom_smooth(method = "lm", se = FALSE))
rank_vs_uniq
rank_vs_uniq <- (ggplot(data = ts_song_frame, aes(x = Ranking,
y = Fraction_Unique)) +
geom_point(size = 4,
aes(color = Album)) +
geom_smooth(method = "lm"))#, se = FALSE))
rank_vs_uniq
rank_vs_uniq <- (ggplot(data = ts_song_frame, aes(x = Ranking,
y = Fraction_Unique)) +
geom_point(size = 3,
aes(color = Album)) +
geom_smooth(method = "lm") +
labs(title = "Song Repition Against My Personal Ratings",
subitle = "* lower numbers means I like the song more",
x = "Ranking",
y = "Fraction of Lyrics that are Unique") +
# This is totally optional and just to make the plot look better
theme(plot.title = element_text(color = "black",
size = 14,
face = "bold.italic"),
axis.title.x = element_text(size = 12,
face = "bold"),
axis.title.y = element_text(size = 12,
face = "bold")))
rank_vs_uniq
rank_vs_uniq <- (ggplot(data = ts_song_frame, aes(x = Ranking,
y = Fraction_Unique)) +
geom_point(size = 3,
aes(color = Album)) +
geom_smooth(method = "lm") +
labs(title = "Song Repition Against My Personal Ratings",
sub = "* lower numbers means I like the song more",
x = "Ranking",
y = "Fraction of Lyrics that are Unique") +
# This is totally optional and just to make the plot look better
theme(plot.title = element_text(color = "black",
size = 14,
face = "bold.italic"),
axis.title.x = element_text(size = 12,
face = "bold"),
axis.title.y = element_text(size = 12,
face = "bold")))
rank_vs_uniq
rank_vs_uniq <- (ggplot(data = ts_song_frame, aes(x = Ranking,
y = Fraction_Unique)) +
geom_point(size = 3,
aes(color = Album)) +
geom_smooth(method = "lm") +
labs(title = "Song Repition Against My Personal Ratings",
subtitle = "* lower numbers means I like the song more",
x = "Ranking",
y = "Fraction of Lyrics that are Unique") +
# This is totally optional and just to make the plot look better
theme(plot.title = element_text(color = "black",
size = 14,
face = "bold.italic"),
axis.title.x = element_text(size = 12,
face = "bold"),
axis.title.y = element_text(size = 12,
face = "bold")))
rank_vs_uniq
cor(ts_song_frame$Ranking, ts_song_frame$Fraction_Unique)
rank_vs_uniq <- (ggplot(data = ts_song_frame, aes(x = Ranking,
y = Fraction_Unique)) +
geom_point(size = 3,
aes(color = Album)) +
geom_smooth(method = "lm") +
annotate("text", x=8, y=.45, size = 6,
label= "italic(r) == -.043", parse = TRUE) +
labs(title = "Song Repition Against My Personal Ratings",
subtitle = "* Lower numbers means I like the song more",
x = "Ranking",
y = "Fraction of Lyrics that are Unique") +
# This is totally optional and just to make the plot look better
theme(plot.title = element_text(color = "black",
size = 14,
face = "bold.italic"),
axis.title.x = element_text(size = 12,
face = "bold"),
axis.title.y = element_text(size = 12,
face = "bold")))
rank_vs_uniq
rank_vs_uniq <- (ggplot(data = ts_song_frame, aes(x = Ranking,
y = Fraction_Unique)) +
geom_point(size = 3,
aes(color = Album)) +
geom_smooth(method = "lm") +
annotate("text", x=8, y=.55, size = 6,
label= "italic(r) == -.043", parse = TRUE) +
labs(title = "Song Repition Against My Personal Ratings",
subtitle = "* Lower numbers means I like the song more",
x = "Ranking",
y = "Fraction of Lyrics that are Unique") +
# This is totally optional and just to make the plot look better
theme(plot.title = element_text(color = "black",
size = 14,
face = "bold.italic"),
axis.title.x = element_text(size = 12,
face = "bold"),
axis.title.y = element_text(size = 12,
face = "bold")))
rank_vs_uniq
rank_vs_uniq <- (ggplot(data = ts_song_frame, aes(x = Ranking,
y = Fraction_Unique)) +
geom_point(size = 3,
aes(color = Album)) +
geom_smooth(method = "lm") +
annotate("text", x=8, y=.5, size = 6,
label= "italic(r) == -.043", parse = TRUE) +
labs(title = "Song Repition Against My Personal Ratings",
subtitle = "* Lower numbers means I like the song more",
x = "Ranking",
y = "Fraction of Lyrics that are Unique") +
# This is totally optional and just to make the plot look better
theme(plot.title = element_text(color = "black",
size = 14,
face = "bold.italic"),
axis.title.x = element_text(size = 12,
face = "bold"),
axis.title.y = element_text(size = 12,
face = "bold")))
rank_vs_uniq
